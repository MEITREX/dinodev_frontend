/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n          query EventsOfProject($projectId: UUID!, $page: Int!, $pageSize: Int!) {\n              project(id: $projectId) {\n                  id\n                  events(page: $page, size: $pageSize) {\n                      ...EventWithChildren\n                  }\n              }\n          }": types.EventsOfProjectDocument,
    "\n        query EventsOfUser($userId: UUID!, $projectId: UUID!, $page: Int!, $pageSize: Int!) {\n            globalUser(id: $userId) {\n                userInProject(projectId: $projectId) {\n                    publicEvents(page: $page, size: $pageSize) {\n                        ...EventWithChildren\n                    }\n                }\n            }\n        }": types.EventsOfUserDocument,
    "\n        mutation LikeEvent($projectId: UUID!, $eventId: UUID!) {\n            mutateProject(id: $projectId) {\n                reactToEvent(eventId: $eventId) {\n                    ...BaseEvent\n                }\n            }\n        }": types.LikeEventDocument,
    "\n        mutation AddUserComment($projectId: UUID!, $optionalParentId: UUID, $message: String!) {\n            mutateProject(id: $projectId) {\n                postComment(optionalParentEventId: $optionalParentId, comment: $message) {\n                    ...BaseEvent\n                }\n            }\n        }": types.AddUserCommentDocument,
    "\n        subscription NewEvent($projectId: UUID!, $userId: UUID!) {\n            event(projectId: $projectId, userId: $userId) {\n                ...ReducedEvent\n            }\n        }": types.NewEventDocument,
    "\n    fragment ReducedEvent on DefaultEvent {\n        id\n        timestamp\n        user {\n            id\n            username\n            avatar\n        }\n        message\n        eventType {\n            identifier\n        }\n        parent {\n            userId\n            message\n        }\n        issueId: field(name: \"issueId\") { value }\n        issueTitle: field(name: \"issueTitle\") { value }\n        repositoryName: field(name: \"repositoryName\") { value }\n        repositoryUrl: field(name: \"repositoryUrl\") { value }\n    }": types.ReducedEventFragmentDoc,
    "\n    fragment BaseEvent on DefaultEvent {\n        id\n        timestamp\n        user {\n            id\n            username\n            avatar\n        }\n        message\n        eventType {\n            identifier\n        }\n        eventData {\n            key\n            value\n        }\n        issueId: field(name: \"issueId\") { value }\n        issueTitle: field(name: \"issueTitle\") { value }\n        repositoryName: field(name: \"repositoryName\") { value }\n        repositoryUrl: field(name: \"repositoryUrl\") { value }\n        reactions {\n            userId\n        }\n        xpForCurrentUser\n    }": types.BaseEventFragmentDoc,
    "\n    fragment EventWithChildren on DefaultEvent {\n        ...BaseEvent\n        children {\n            ...BaseEvent\n        }\n    }": types.EventWithChildrenFragmentDoc,
    "\n      fragment BaseGlobalUser on GlobalUser {\n          id\n          avatar\n          username\n          roles {\n              name\n              globalPrivileges\n          }\n      }": types.BaseGlobalUserFragmentDoc,
    "\n        query CurrentUser {\n            currentUser {\n                ... BaseGlobalUser\n            }\n        }\n    ": types.CurrentUserDocument,
    "\n      fragment BasicUserInfo on BasicUserInfo {\n          isAdmin\n          avatar\n          username\n      }": types.BasicUserInfoFragmentDoc,
    "\n        query CurrentBasicUserInfo {\n            currentUserInfo {\n                ... BasicUserInfo\n            }\n        }\n    ": types.CurrentBasicUserInfoDocument,
    "\n        mutation registerUser($input: CreateGlobalUserInput!) {\n            register(input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    ": types.RegisterUserDocument,
    "\n        mutation updateGlobalUser($userId: UUID!, $input: UpdateGlobalUserInput!) {\n            updateGlobalUser(id: $userId, input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    ": types.UpdateGlobalUserDocument,
    "\n      fragment ProjectBoard on ProjectBoard {\n          states {\n              state {\n                  name\n                  type\n                  imsStateId\n              }\n              issues {\n                  id\n                  title\n                  issueUrl\n                  description\n                  labels\n                  storyPoints\n                  effortEstimation\n                  priority\n                  sprintNumber\n                  type {\n                      iconPath\n                      name\n                  }\n                  assignees {\n                      user {\n                          id\n                          avatar\n                          username\n                      }\n                  }\n              }\n          }\n      }": types.ProjectBoardFragmentDoc,
    "\n        query BoardQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                id\n                projectBoard {\n                    ... ProjectBoard\n                }\n            }\n        }\n    ": types.BoardQueryDocument,
    "\n        mutation ChangeStateMutation($projectId: UUID!, $issueId: ID!, $stateName: String!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    changeIssueState(stateName: $stateName) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    ": types.ChangeStateMutationDocument,
    "\n        mutation FinishIssueMutation($projectId: UUID!, $issueId: ID!, $doneStateName: String!, $dodConfirmStates: [DefinitionOfDoneConfirmState!]!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    finishIssue(doneStateName: $doneStateName, dodConfirmStates: $dodConfirmStates) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    ": types.FinishIssueMutationDocument,
    "\n        mutation CreateIssueMutation($projectId: UUID!, $input: CreateIssueInput!) {\n            mutateProject(id: $projectId) {\n                createIssue(input: $input) {\n                    ...IssueBase\n                }\n            }\n        }\n    ": types.CreateIssueMutationDocument,
    "\n        mutation AssignIssueMutation($projectId: UUID!, $issueId: ID!, $assigneeId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    assignIssue(assigneeId: $assigneeId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    ": types.AssignIssueMutationDocument,
    "\n        mutation CommentOnIssueMutation($projectId: UUID!, $issueId: ID!, $message: String!, $optionalParentId: String) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    commentOnIssue(comment: $message, optionalParentId: $optionalParentId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    ": types.CommentOnIssueMutationDocument,
    "\n        query IssueQuery($projectId: UUID!, $issueId: UUID!) {\n            project(id: $projectId) {\n                id\n                issue(id: $issueId) {\n                    ...IssueWithEvents\n                }\n            }\n        }\n    ": types.IssueQueryDocument,
    "\n    fragment IssueBase on Issue {\n        id\n        title\n        issueUrl\n        description\n        storyPoints\n        effortEstimation\n        priority\n        sprintNumber\n        labels\n        type {\n            iconPath\n            name\n        }\n        assignees {\n            user {\n                id\n                avatar\n                username\n            }\n        }\n    }": types.IssueBaseFragmentDoc,
    "\n    fragment IssueWithEvents on Issue {\n        ...IssueBase\n        issueEvents {\n            ...EventWithChildren\n        }\n    }": types.IssueWithEventsFragmentDoc,
    "\n        mutation JoinMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                joinMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    ": types.JoinMeetingDocument,
    "\n        mutation LeaveMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                leaveMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    ": types.LeaveMeetingDocument,
    "\n        mutation PromoteToMeetingLeader($projectId: UUID!, $type: MeetingType!, $userId: UUID!) {\n            mutateProject(id: $projectId) {\n                promoteToMeetingLeader(type: $type, userId: $userId) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    ": types.PromoteToMeetingLeaderDocument,
    "\n        mutation CancelMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                cancelMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    ": types.CancelMeetingDocument,
    "\n    fragment DefaultMeeting on Meeting {\n        meetingType\n        active\n        attendees {\n            role\n            state\n            user {\n                id\n                username\n                avatar\n            }\n        }\n    }\n": types.DefaultMeetingFragmentDoc,
    "\n        mutation CreatePlanningMeeting($projectId: UUID!, $input: PlanningMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createPlanningMeeting(input: $input) {\n                    ...DefaultPlanningMeeting\n                }\n            }\n        }": types.CreatePlanningMeetingDocument,
    "\n        mutation ChangePage($projectId: UUID!, $page: PlanningMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    changePage(page: $page) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.ChangePageDocument,
    "\n        mutation VoteAnimal($projectId: UUID!, $animal: Animal!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteAnimal(animal: $animal) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.VoteAnimalDocument,
    "\n        mutation EndAnimalVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endAnimalVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.EndAnimalVotingDocument,
    "\n        mutation AddName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.AddNameDocument,
    "\n        mutation VoteName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.VoteNameDocument,
    "\n        mutation EndNameVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endNameVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.EndNameVotingDocument,
    "\n        mutation VoteEstimation($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteEstimation(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.VoteEstimationDocument,
    "\n        mutation RestartEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    restartEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.RestartEstimationDocument,
    "\n        mutation NextIssue($projectId: UUID!, $issueId: ID) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    nextIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.NextIssueDocument,
    "\n        mutation StartCountdown($projectId: UUID!, $seconds: Int!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    startCountdown(seconds: $seconds) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.StartCountdownDocument,
    "\n        mutation EndEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.EndEstimationDocument,
    "\n        mutation SetFinalResult($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    setFinalResult(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.SetFinalResultDocument,
    "\n        mutation AddSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.AddSprintIssueDocument,
    "\n        mutation RemoveSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    removeSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.RemoveSprintIssueDocument,
    "\n        mutation FinishMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    finishMeeting {\n                        ...DefaultSprint\n                    }\n                }\n            }\n        }": types.FinishMeetingDocument,
    "\n        subscription PlanningMeeting($projectId: UUID!) {\n            planningMeeting(projectId: $projectId) {\n                ...DefaultPlanningMeeting\n            }\n        }": types.PlanningMeetingDocument,
    "\n    fragment DefaultPlanningMeeting on PlanningMeeting {\n        ...DefaultMeeting\n        currentPage\n        animalVoting {\n            finished\n            votableAnimals\n            votingResult\n            animalVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        nameVoting {\n            finished\n            votableNames\n            votingResult\n            nameVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        issueEstimation {\n            finished\n            countdownSeconds\n            estimationStats {\n                max\n                min\n                median\n                mode\n            }\n            finalResult\n            issueId # remark: in subscription context, requesting issues is not allowed, so we only get the id\n            votes {\n                totalVotes\n                votedFor\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        sprintGoalVoting {\n            finished\n            nonSprintIssueIds\n            sprintIssueIds\n        }\n    }": types.DefaultPlanningMeetingFragmentDoc,
    "\n      fragment ProjectMain on Project {\n          id\n          name\n          description\n          currentSprintNumber\n\n          projectSettings {\n              imsSettings {\n                  imsName\n                  imsIcon {\n                      path\n                  }\n                  imsProjectUrl\n                  issueStates {\n                      name\n                      type\n                  }\n                  issueTypes {\n                      name\n                  }\n              }\n              codeRepositorySettings {\n                  repositories {\n                      name\n                      url\n                      icon {\n                          mdiIcon\n                      }\n                  }\n              }\n              definitionOfDone {\n                  text\n                  required\n                  implies {\n                      text\n                      required\n                      implies {\n                          text\n                          required\n                      }\n                  }\n              }\n          }\n      }\n  ": types.ProjectMainFragmentDoc,
    "\n      fragment ProjectBase on Project {\n          id\n          name\n          description\n\n          currentUser {\n              roles {\n                  projectPrivileges\n              }\n          }\n      }\n  ": types.ProjectBaseFragmentDoc,
    "\n        query ProjectMainQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                ... ProjectMain\n            }\n        }\n    ": types.ProjectMainQueryDocument,
    "\n        query AllProjectsQuery {\n            projects {\n                ... ProjectBase\n            }\n        }\n    ": types.AllProjectsQueryDocument,
    "\n        mutation CreateProject($input: CreateProjectInput!) {\n            createProject(input: $input) {\n                ... ProjectMain\n            }\n        }\n    ": types.CreateProjectDocument,
    "\n        mutation UpdateProject($projectId: UUID!, $input: UpdateProjectInput!) {\n            updateProject(id: $projectId, input: $input) {\n                ... ProjectMain\n            }\n        }\n    ": types.UpdateProjectDocument,
    "\n        mutation DeleteProject($projectId: UUID!) {\n            deleteProject(id: $projectId)\n        }\n    ": types.DeleteProjectDocument,
    "\n        mutation ChangeRetrospectiveMeetingPage($projectId: UUID!, $page: RetrospectiveMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    updatePage(page: $page) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    ": types.ChangeRetrospectiveMeetingPageDocument,
    "\n        mutation AddComment($projectId: UUID!, $columnId: UUID!, $content: String!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    addComment(columnId: $columnId, content: $content) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    ": types.AddCommentDocument,
    "\n        mutation EditComment($projectId: UUID!, $commentId: UUID!, $content: String!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    editComment(commentId: $commentId, content: $content) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    ": types.EditCommentDocument,
    "\n        mutation DeleteComment($projectId: UUID!, $commentId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    deleteComment(commentId: $commentId) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    ": types.DeleteCommentDocument,
    "\n        mutation ThumbsUpComment($projectId: UUID!, $commentId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    thumbsUpComment(commentId: $commentId) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    ": types.ThumbsUpCommentDocument,
    "\n        mutation FinishRetroMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    finishMeeting {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    ": types.FinishRetroMeetingDocument,
    "\n        mutation AwardMedals($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    awardMedals {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    ": types.AwardMedalsDocument,
    "\n        mutation CreateRetrospectiveMeeting($projectId: UUID!, $input: RetrospectiveMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createRetrospectiveMeeting(input: $input) {\n                    ...DefaultRetrospectiveMeeting\n                }\n            }\n        }": types.CreateRetrospectiveMeetingDocument,
    "\n        subscription RetrospectiveMeeting($projectId: UUID!) {\n            retrospectiveMeeting(projectId: $projectId) {\n                ...DefaultRetrospectiveMeeting\n            }\n        }\n    ": types.RetrospectiveMeetingDocument,
    "\n    fragment DefaultRetrospectiveMeeting on RetrospectiveMeeting {\n        ...DefaultMeeting\n        bronzeMedalUser {\n            id\n            username\n            avatar\n        }\n        silverMedalUser {\n            id\n            username\n            avatar\n        }\n        goldMedalUser {\n            id\n            username\n            avatar\n        }\n        bronzeMedalPoints\n        silverMedalPoints\n        goldMedalPoints\n\n        currentPage\n        goldChallengeReward\n        \n    }\n": types.DefaultRetrospectiveMeetingFragmentDoc,
    "\n      query Shop {\n        shopItems {\n            ...ShopItem\n        }\n      }\n    ": types.ShopDocument,
    "\n        mutation BuyAndPlace($projectId: UUID!, $input: PlaceAssetInput!) {\n            mutateProject(id: $projectId) {\n                buyAndPlace(input: $input) {\n                    id\n                }\n            }\n        }\n    ": types.BuyAndPlaceDocument,
    "\n  fragment ShopItem on ShopItem {\n      id\n      name\n      image\n      price    \n  }\n": types.ShopItemFragmentDoc,
    "\n      query Sprint($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              currentSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  ": types.SprintDocument,
    "\n      query PreviousSprint($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              previousSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  ": types.PreviousSprintDocument,
    "\n      query Sprints($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              sprints {\n                  ...DefaultSprint\n              }\n          }\n      }\n  ": types.SprintsDocument,
    "\n    fragment DefaultSprint on Sprint {\n        id\n        startDate\n        endDate\n        storyPointsPlanned\n        stats {\n            totalStoryPoints\n            percentageStoryPointsCompleted\n            percentageStoryPointsInProgress\n            percentageTimeElapsed\n            daysLeft\n            averageStoryPoints\n            successState\n            burnDown\n            streak\n        }\n        placedAssets {\n            asset\n            x\n            y\n        }\n        name\n        animal\n        number\n    }\n": types.DefaultSprintFragmentDoc,
    "\n        mutation CreateStandupMeeting($projectId: UUID!, $input: StandupMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createStandupMeeting(input: $input) {\n                    ...DefaultStandupMeeting\n                }\n            }\n        }": types.CreateStandupMeetingDocument,
    "\n        mutation StartStandupMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    startStandupMeeting {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }": types.StartStandupMeetingDocument,
    "\n        mutation ChangeCurrentAttendee($projectId: UUID!, $userId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    changeCurrentAttendee(attendeeId: $userId) {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }": types.ChangeCurrentAttendeeDocument,
    "\n        mutation FinishStandupMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    finishStandupMeeting {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }": types.FinishStandupMeetingDocument,
    "\n        subscription StandupMeeting($projectId: UUID!) {\n            standupMeeting(projectId: $projectId) {\n                ...DefaultStandupMeeting\n            }\n        }": types.StandupMeetingDocument,
    "\n    fragment DefaultStandupMeeting on StandupMeeting {\n        ...DefaultMeeting\n        standupMeetingSettings {\n            countdownPerAttendee\n        }\n        currentAttendee {\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        order {\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        \n    }": types.DefaultStandupMeetingFragmentDoc,
    "\n      fragment UserStats on UserStats {\n          xp\n          level\n          xpToNextLevel\n          totalXp\n\n          bronzeMedals\n          silverMedals\n          goldMedals\n\n          virtualCurrency\n\n          commentsWritten\n          issuesCompleted\n          issuesCreated\n          pullRequestsClosed\n          pullRequestsCreated\n          pullRequestsReviewed\n          reactionsGiven\n      }": types.UserStatsFragmentDoc,
    "\n      fragment UserInProject on UserInProject {\n          user {\n              id\n              username\n              avatar\n          }\n          roles {\n              gamifiedName\n              name\n              projectPrivileges\n          }\n          achievements {\n              achievement {\n                  name\n                  description\n                  goal\n                  icon {\n                      emoji\n                  }\n              }\n              progress\n              achieved\n          }\n          userStats {\n              level\n              \n              goldMedals\n              silverMedals\n              bronzeMedals\n          }\n          currentBadge {\n              emoji\n          }\n      }": types.UserInProjectFragmentDoc,
    "\n                query UserInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        currentUser {\n                            ... UserInProject\n                        }\n                    }\n                }\n      ": types.UserInProjectQueryDocument,
    "\n                query UserStatsQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        currentUser {\n                            userStats {\n                                ... UserStats\n                            }\n                        }\n                    }\n                }\n      ": types.UserStatsQueryDocument,
    "\n                query AllUsersInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        users {\n                            ... UserInProject\n                        }\n                    }\n                }\n      ": types.AllUsersInProjectQueryDocument,
    "\n        mutation JoinProject($projectId: UUID!) {\n            joinProject(projectId: $projectId) {\n                ... UserInProject\n            }\n        }\n    ": types.JoinProjectDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query EventsOfProject($projectId: UUID!, $page: Int!, $pageSize: Int!) {\n              project(id: $projectId) {\n                  id\n                  events(page: $page, size: $pageSize) {\n                      ...EventWithChildren\n                  }\n              }\n          }"): (typeof documents)["\n          query EventsOfProject($projectId: UUID!, $page: Int!, $pageSize: Int!) {\n              project(id: $projectId) {\n                  id\n                  events(page: $page, size: $pageSize) {\n                      ...EventWithChildren\n                  }\n              }\n          }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query EventsOfUser($userId: UUID!, $projectId: UUID!, $page: Int!, $pageSize: Int!) {\n            globalUser(id: $userId) {\n                userInProject(projectId: $projectId) {\n                    publicEvents(page: $page, size: $pageSize) {\n                        ...EventWithChildren\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        query EventsOfUser($userId: UUID!, $projectId: UUID!, $page: Int!, $pageSize: Int!) {\n            globalUser(id: $userId) {\n                userInProject(projectId: $projectId) {\n                    publicEvents(page: $page, size: $pageSize) {\n                        ...EventWithChildren\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation LikeEvent($projectId: UUID!, $eventId: UUID!) {\n            mutateProject(id: $projectId) {\n                reactToEvent(eventId: $eventId) {\n                    ...BaseEvent\n                }\n            }\n        }"): (typeof documents)["\n        mutation LikeEvent($projectId: UUID!, $eventId: UUID!) {\n            mutateProject(id: $projectId) {\n                reactToEvent(eventId: $eventId) {\n                    ...BaseEvent\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AddUserComment($projectId: UUID!, $optionalParentId: UUID, $message: String!) {\n            mutateProject(id: $projectId) {\n                postComment(optionalParentEventId: $optionalParentId, comment: $message) {\n                    ...BaseEvent\n                }\n            }\n        }"): (typeof documents)["\n        mutation AddUserComment($projectId: UUID!, $optionalParentId: UUID, $message: String!) {\n            mutateProject(id: $projectId) {\n                postComment(optionalParentEventId: $optionalParentId, comment: $message) {\n                    ...BaseEvent\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        subscription NewEvent($projectId: UUID!, $userId: UUID!) {\n            event(projectId: $projectId, userId: $userId) {\n                ...ReducedEvent\n            }\n        }"): (typeof documents)["\n        subscription NewEvent($projectId: UUID!, $userId: UUID!) {\n            event(projectId: $projectId, userId: $userId) {\n                ...ReducedEvent\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ReducedEvent on DefaultEvent {\n        id\n        timestamp\n        user {\n            id\n            username\n            avatar\n        }\n        message\n        eventType {\n            identifier\n        }\n        parent {\n            userId\n            message\n        }\n        issueId: field(name: \"issueId\") { value }\n        issueTitle: field(name: \"issueTitle\") { value }\n        repositoryName: field(name: \"repositoryName\") { value }\n        repositoryUrl: field(name: \"repositoryUrl\") { value }\n    }"): (typeof documents)["\n    fragment ReducedEvent on DefaultEvent {\n        id\n        timestamp\n        user {\n            id\n            username\n            avatar\n        }\n        message\n        eventType {\n            identifier\n        }\n        parent {\n            userId\n            message\n        }\n        issueId: field(name: \"issueId\") { value }\n        issueTitle: field(name: \"issueTitle\") { value }\n        repositoryName: field(name: \"repositoryName\") { value }\n        repositoryUrl: field(name: \"repositoryUrl\") { value }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BaseEvent on DefaultEvent {\n        id\n        timestamp\n        user {\n            id\n            username\n            avatar\n        }\n        message\n        eventType {\n            identifier\n        }\n        eventData {\n            key\n            value\n        }\n        issueId: field(name: \"issueId\") { value }\n        issueTitle: field(name: \"issueTitle\") { value }\n        repositoryName: field(name: \"repositoryName\") { value }\n        repositoryUrl: field(name: \"repositoryUrl\") { value }\n        reactions {\n            userId\n        }\n        xpForCurrentUser\n    }"): (typeof documents)["\n    fragment BaseEvent on DefaultEvent {\n        id\n        timestamp\n        user {\n            id\n            username\n            avatar\n        }\n        message\n        eventType {\n            identifier\n        }\n        eventData {\n            key\n            value\n        }\n        issueId: field(name: \"issueId\") { value }\n        issueTitle: field(name: \"issueTitle\") { value }\n        repositoryName: field(name: \"repositoryName\") { value }\n        repositoryUrl: field(name: \"repositoryUrl\") { value }\n        reactions {\n            userId\n        }\n        xpForCurrentUser\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EventWithChildren on DefaultEvent {\n        ...BaseEvent\n        children {\n            ...BaseEvent\n        }\n    }"): (typeof documents)["\n    fragment EventWithChildren on DefaultEvent {\n        ...BaseEvent\n        children {\n            ...BaseEvent\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment BaseGlobalUser on GlobalUser {\n          id\n          avatar\n          username\n          roles {\n              name\n              globalPrivileges\n          }\n      }"): (typeof documents)["\n      fragment BaseGlobalUser on GlobalUser {\n          id\n          avatar\n          username\n          roles {\n              name\n              globalPrivileges\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query CurrentUser {\n            currentUser {\n                ... BaseGlobalUser\n            }\n        }\n    "): (typeof documents)["\n        query CurrentUser {\n            currentUser {\n                ... BaseGlobalUser\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment BasicUserInfo on BasicUserInfo {\n          isAdmin\n          avatar\n          username\n      }"): (typeof documents)["\n      fragment BasicUserInfo on BasicUserInfo {\n          isAdmin\n          avatar\n          username\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query CurrentBasicUserInfo {\n            currentUserInfo {\n                ... BasicUserInfo\n            }\n        }\n    "): (typeof documents)["\n        query CurrentBasicUserInfo {\n            currentUserInfo {\n                ... BasicUserInfo\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation registerUser($input: CreateGlobalUserInput!) {\n            register(input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "): (typeof documents)["\n        mutation registerUser($input: CreateGlobalUserInput!) {\n            register(input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation updateGlobalUser($userId: UUID!, $input: UpdateGlobalUserInput!) {\n            updateGlobalUser(id: $userId, input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "): (typeof documents)["\n        mutation updateGlobalUser($userId: UUID!, $input: UpdateGlobalUserInput!) {\n            updateGlobalUser(id: $userId, input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment ProjectBoard on ProjectBoard {\n          states {\n              state {\n                  name\n                  type\n                  imsStateId\n              }\n              issues {\n                  id\n                  title\n                  issueUrl\n                  description\n                  labels\n                  storyPoints\n                  effortEstimation\n                  priority\n                  sprintNumber\n                  type {\n                      iconPath\n                      name\n                  }\n                  assignees {\n                      user {\n                          id\n                          avatar\n                          username\n                      }\n                  }\n              }\n          }\n      }"): (typeof documents)["\n      fragment ProjectBoard on ProjectBoard {\n          states {\n              state {\n                  name\n                  type\n                  imsStateId\n              }\n              issues {\n                  id\n                  title\n                  issueUrl\n                  description\n                  labels\n                  storyPoints\n                  effortEstimation\n                  priority\n                  sprintNumber\n                  type {\n                      iconPath\n                      name\n                  }\n                  assignees {\n                      user {\n                          id\n                          avatar\n                          username\n                      }\n                  }\n              }\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query BoardQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                id\n                projectBoard {\n                    ... ProjectBoard\n                }\n            }\n        }\n    "): (typeof documents)["\n        query BoardQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                id\n                projectBoard {\n                    ... ProjectBoard\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ChangeStateMutation($projectId: UUID!, $issueId: ID!, $stateName: String!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    changeIssueState(stateName: $stateName) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation ChangeStateMutation($projectId: UUID!, $issueId: ID!, $stateName: String!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    changeIssueState(stateName: $stateName) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation FinishIssueMutation($projectId: UUID!, $issueId: ID!, $doneStateName: String!, $dodConfirmStates: [DefinitionOfDoneConfirmState!]!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    finishIssue(doneStateName: $doneStateName, dodConfirmStates: $dodConfirmStates) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation FinishIssueMutation($projectId: UUID!, $issueId: ID!, $doneStateName: String!, $dodConfirmStates: [DefinitionOfDoneConfirmState!]!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    finishIssue(doneStateName: $doneStateName, dodConfirmStates: $dodConfirmStates) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CreateIssueMutation($projectId: UUID!, $input: CreateIssueInput!) {\n            mutateProject(id: $projectId) {\n                createIssue(input: $input) {\n                    ...IssueBase\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation CreateIssueMutation($projectId: UUID!, $input: CreateIssueInput!) {\n            mutateProject(id: $projectId) {\n                createIssue(input: $input) {\n                    ...IssueBase\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AssignIssueMutation($projectId: UUID!, $issueId: ID!, $assigneeId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    assignIssue(assigneeId: $assigneeId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation AssignIssueMutation($projectId: UUID!, $issueId: ID!, $assigneeId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    assignIssue(assigneeId: $assigneeId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CommentOnIssueMutation($projectId: UUID!, $issueId: ID!, $message: String!, $optionalParentId: String) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    commentOnIssue(comment: $message, optionalParentId: $optionalParentId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation CommentOnIssueMutation($projectId: UUID!, $issueId: ID!, $message: String!, $optionalParentId: String) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    commentOnIssue(comment: $message, optionalParentId: $optionalParentId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query IssueQuery($projectId: UUID!, $issueId: UUID!) {\n            project(id: $projectId) {\n                id\n                issue(id: $issueId) {\n                    ...IssueWithEvents\n                }\n            }\n        }\n    "): (typeof documents)["\n        query IssueQuery($projectId: UUID!, $issueId: UUID!) {\n            project(id: $projectId) {\n                id\n                issue(id: $issueId) {\n                    ...IssueWithEvents\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IssueBase on Issue {\n        id\n        title\n        issueUrl\n        description\n        storyPoints\n        effortEstimation\n        priority\n        sprintNumber\n        labels\n        type {\n            iconPath\n            name\n        }\n        assignees {\n            user {\n                id\n                avatar\n                username\n            }\n        }\n    }"): (typeof documents)["\n    fragment IssueBase on Issue {\n        id\n        title\n        issueUrl\n        description\n        storyPoints\n        effortEstimation\n        priority\n        sprintNumber\n        labels\n        type {\n            iconPath\n            name\n        }\n        assignees {\n            user {\n                id\n                avatar\n                username\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IssueWithEvents on Issue {\n        ...IssueBase\n        issueEvents {\n            ...EventWithChildren\n        }\n    }"): (typeof documents)["\n    fragment IssueWithEvents on Issue {\n        ...IssueBase\n        issueEvents {\n            ...EventWithChildren\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation JoinMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                joinMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation JoinMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                joinMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation LeaveMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                leaveMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation LeaveMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                leaveMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation PromoteToMeetingLeader($projectId: UUID!, $type: MeetingType!, $userId: UUID!) {\n            mutateProject(id: $projectId) {\n                promoteToMeetingLeader(type: $type, userId: $userId) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation PromoteToMeetingLeader($projectId: UUID!, $type: MeetingType!, $userId: UUID!) {\n            mutateProject(id: $projectId) {\n                promoteToMeetingLeader(type: $type, userId: $userId) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CancelMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                cancelMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation CancelMeeting($projectId: UUID!, $type: MeetingType!) {\n            mutateProject(id: $projectId) {\n                cancelMeeting(type: $type) {\n                    ...DefaultMeeting\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultMeeting on Meeting {\n        meetingType\n        active\n        attendees {\n            role\n            state\n            user {\n                id\n                username\n                avatar\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment DefaultMeeting on Meeting {\n        meetingType\n        active\n        attendees {\n            role\n            state\n            user {\n                id\n                username\n                avatar\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CreatePlanningMeeting($projectId: UUID!, $input: PlanningMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createPlanningMeeting(input: $input) {\n                    ...DefaultPlanningMeeting\n                }\n            }\n        }"): (typeof documents)["\n        mutation CreatePlanningMeeting($projectId: UUID!, $input: PlanningMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createPlanningMeeting(input: $input) {\n                    ...DefaultPlanningMeeting\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ChangePage($projectId: UUID!, $page: PlanningMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    changePage(page: $page) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation ChangePage($projectId: UUID!, $page: PlanningMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    changePage(page: $page) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation VoteAnimal($projectId: UUID!, $animal: Animal!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteAnimal(animal: $animal) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation VoteAnimal($projectId: UUID!, $animal: Animal!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteAnimal(animal: $animal) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation EndAnimalVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endAnimalVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation EndAnimalVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endAnimalVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AddName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation AddName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation VoteName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation VoteName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation EndNameVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endNameVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation EndNameVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endNameVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation VoteEstimation($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteEstimation(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation VoteEstimation($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteEstimation(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation RestartEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    restartEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation RestartEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    restartEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation NextIssue($projectId: UUID!, $issueId: ID) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    nextIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation NextIssue($projectId: UUID!, $issueId: ID) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    nextIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation StartCountdown($projectId: UUID!, $seconds: Int!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    startCountdown(seconds: $seconds) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation StartCountdown($projectId: UUID!, $seconds: Int!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    startCountdown(seconds: $seconds) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation EndEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation EndEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation SetFinalResult($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    setFinalResult(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation SetFinalResult($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    setFinalResult(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AddSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation AddSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation RemoveSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    removeSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation RemoveSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    removeSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation FinishMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    finishMeeting {\n                        ...DefaultSprint\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation FinishMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    finishMeeting {\n                        ...DefaultSprint\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        subscription PlanningMeeting($projectId: UUID!) {\n            planningMeeting(projectId: $projectId) {\n                ...DefaultPlanningMeeting\n            }\n        }"): (typeof documents)["\n        subscription PlanningMeeting($projectId: UUID!) {\n            planningMeeting(projectId: $projectId) {\n                ...DefaultPlanningMeeting\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultPlanningMeeting on PlanningMeeting {\n        ...DefaultMeeting\n        currentPage\n        animalVoting {\n            finished\n            votableAnimals\n            votingResult\n            animalVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        nameVoting {\n            finished\n            votableNames\n            votingResult\n            nameVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        issueEstimation {\n            finished\n            countdownSeconds\n            estimationStats {\n                max\n                min\n                median\n                mode\n            }\n            finalResult\n            issueId # remark: in subscription context, requesting issues is not allowed, so we only get the id\n            votes {\n                totalVotes\n                votedFor\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        sprintGoalVoting {\n            finished\n            nonSprintIssueIds\n            sprintIssueIds\n        }\n    }"): (typeof documents)["\n    fragment DefaultPlanningMeeting on PlanningMeeting {\n        ...DefaultMeeting\n        currentPage\n        animalVoting {\n            finished\n            votableAnimals\n            votingResult\n            animalVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        nameVoting {\n            finished\n            votableNames\n            votingResult\n            nameVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        issueEstimation {\n            finished\n            countdownSeconds\n            estimationStats {\n                max\n                min\n                median\n                mode\n            }\n            finalResult\n            issueId # remark: in subscription context, requesting issues is not allowed, so we only get the id\n            votes {\n                totalVotes\n                votedFor\n                userVotes {\n                    user {\n                        id\n                        username\n                    }\n                }\n            }\n        }\n        sprintGoalVoting {\n            finished\n            nonSprintIssueIds\n            sprintIssueIds\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment ProjectMain on Project {\n          id\n          name\n          description\n          currentSprintNumber\n\n          projectSettings {\n              imsSettings {\n                  imsName\n                  imsIcon {\n                      path\n                  }\n                  imsProjectUrl\n                  issueStates {\n                      name\n                      type\n                  }\n                  issueTypes {\n                      name\n                  }\n              }\n              codeRepositorySettings {\n                  repositories {\n                      name\n                      url\n                      icon {\n                          mdiIcon\n                      }\n                  }\n              }\n              definitionOfDone {\n                  text\n                  required\n                  implies {\n                      text\n                      required\n                      implies {\n                          text\n                          required\n                      }\n                  }\n              }\n          }\n      }\n  "): (typeof documents)["\n      fragment ProjectMain on Project {\n          id\n          name\n          description\n          currentSprintNumber\n\n          projectSettings {\n              imsSettings {\n                  imsName\n                  imsIcon {\n                      path\n                  }\n                  imsProjectUrl\n                  issueStates {\n                      name\n                      type\n                  }\n                  issueTypes {\n                      name\n                  }\n              }\n              codeRepositorySettings {\n                  repositories {\n                      name\n                      url\n                      icon {\n                          mdiIcon\n                      }\n                  }\n              }\n              definitionOfDone {\n                  text\n                  required\n                  implies {\n                      text\n                      required\n                      implies {\n                          text\n                          required\n                      }\n                  }\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment ProjectBase on Project {\n          id\n          name\n          description\n\n          currentUser {\n              roles {\n                  projectPrivileges\n              }\n          }\n      }\n  "): (typeof documents)["\n      fragment ProjectBase on Project {\n          id\n          name\n          description\n\n          currentUser {\n              roles {\n                  projectPrivileges\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query ProjectMainQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                ... ProjectMain\n            }\n        }\n    "): (typeof documents)["\n        query ProjectMainQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                ... ProjectMain\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query AllProjectsQuery {\n            projects {\n                ... ProjectBase\n            }\n        }\n    "): (typeof documents)["\n        query AllProjectsQuery {\n            projects {\n                ... ProjectBase\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CreateProject($input: CreateProjectInput!) {\n            createProject(input: $input) {\n                ... ProjectMain\n            }\n        }\n    "): (typeof documents)["\n        mutation CreateProject($input: CreateProjectInput!) {\n            createProject(input: $input) {\n                ... ProjectMain\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation UpdateProject($projectId: UUID!, $input: UpdateProjectInput!) {\n            updateProject(id: $projectId, input: $input) {\n                ... ProjectMain\n            }\n        }\n    "): (typeof documents)["\n        mutation UpdateProject($projectId: UUID!, $input: UpdateProjectInput!) {\n            updateProject(id: $projectId, input: $input) {\n                ... ProjectMain\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation DeleteProject($projectId: UUID!) {\n            deleteProject(id: $projectId)\n        }\n    "): (typeof documents)["\n        mutation DeleteProject($projectId: UUID!) {\n            deleteProject(id: $projectId)\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ChangeRetrospectiveMeetingPage($projectId: UUID!, $page: RetrospectiveMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    updatePage(page: $page) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation ChangeRetrospectiveMeetingPage($projectId: UUID!, $page: RetrospectiveMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    updatePage(page: $page) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AddComment($projectId: UUID!, $columnId: UUID!, $content: String!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    addComment(columnId: $columnId, content: $content) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation AddComment($projectId: UUID!, $columnId: UUID!, $content: String!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    addComment(columnId: $columnId, content: $content) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation EditComment($projectId: UUID!, $commentId: UUID!, $content: String!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    editComment(commentId: $commentId, content: $content) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation EditComment($projectId: UUID!, $commentId: UUID!, $content: String!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    editComment(commentId: $commentId, content: $content) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation DeleteComment($projectId: UUID!, $commentId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    deleteComment(commentId: $commentId) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation DeleteComment($projectId: UUID!, $commentId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    deleteComment(commentId: $commentId) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ThumbsUpComment($projectId: UUID!, $commentId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    thumbsUpComment(commentId: $commentId) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation ThumbsUpComment($projectId: UUID!, $commentId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    thumbsUpComment(commentId: $commentId) {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation FinishRetroMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    finishMeeting {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation FinishRetroMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    finishMeeting {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AwardMedals($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    awardMedals {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation AwardMedals($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateRetrospectiveMeeting {\n                    awardMedals {\n                        ...DefaultRetrospectiveMeeting\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CreateRetrospectiveMeeting($projectId: UUID!, $input: RetrospectiveMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createRetrospectiveMeeting(input: $input) {\n                    ...DefaultRetrospectiveMeeting\n                }\n            }\n        }"): (typeof documents)["\n        mutation CreateRetrospectiveMeeting($projectId: UUID!, $input: RetrospectiveMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createRetrospectiveMeeting(input: $input) {\n                    ...DefaultRetrospectiveMeeting\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        subscription RetrospectiveMeeting($projectId: UUID!) {\n            retrospectiveMeeting(projectId: $projectId) {\n                ...DefaultRetrospectiveMeeting\n            }\n        }\n    "): (typeof documents)["\n        subscription RetrospectiveMeeting($projectId: UUID!) {\n            retrospectiveMeeting(projectId: $projectId) {\n                ...DefaultRetrospectiveMeeting\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultRetrospectiveMeeting on RetrospectiveMeeting {\n        ...DefaultMeeting\n        bronzeMedalUser {\n            id\n            username\n            avatar\n        }\n        silverMedalUser {\n            id\n            username\n            avatar\n        }\n        goldMedalUser {\n            id\n            username\n            avatar\n        }\n        bronzeMedalPoints\n        silverMedalPoints\n        goldMedalPoints\n\n        currentPage\n        goldChallengeReward\n        \n    }\n"): (typeof documents)["\n    fragment DefaultRetrospectiveMeeting on RetrospectiveMeeting {\n        ...DefaultMeeting\n        bronzeMedalUser {\n            id\n            username\n            avatar\n        }\n        silverMedalUser {\n            id\n            username\n            avatar\n        }\n        goldMedalUser {\n            id\n            username\n            avatar\n        }\n        bronzeMedalPoints\n        silverMedalPoints\n        goldMedalPoints\n\n        currentPage\n        goldChallengeReward\n        \n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Shop {\n        shopItems {\n            ...ShopItem\n        }\n      }\n    "): (typeof documents)["\n      query Shop {\n        shopItems {\n            ...ShopItem\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation BuyAndPlace($projectId: UUID!, $input: PlaceAssetInput!) {\n            mutateProject(id: $projectId) {\n                buyAndPlace(input: $input) {\n                    id\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation BuyAndPlace($projectId: UUID!, $input: PlaceAssetInput!) {\n            mutateProject(id: $projectId) {\n                buyAndPlace(input: $input) {\n                    id\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShopItem on ShopItem {\n      id\n      name\n      image\n      price    \n  }\n"): (typeof documents)["\n  fragment ShopItem on ShopItem {\n      id\n      name\n      image\n      price    \n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Sprint($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              currentSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "): (typeof documents)["\n      query Sprint($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              currentSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PreviousSprint($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              previousSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "): (typeof documents)["\n      query PreviousSprint($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              previousSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Sprints($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              sprints {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "): (typeof documents)["\n      query Sprints($projectId: UUID!) {\n          project(id: $projectId) {\n              id\n              sprints {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultSprint on Sprint {\n        id\n        startDate\n        endDate\n        storyPointsPlanned\n        stats {\n            totalStoryPoints\n            percentageStoryPointsCompleted\n            percentageStoryPointsInProgress\n            percentageTimeElapsed\n            daysLeft\n            averageStoryPoints\n            successState\n            burnDown\n            streak\n        }\n        placedAssets {\n            asset\n            x\n            y\n        }\n        name\n        animal\n        number\n    }\n"): (typeof documents)["\n    fragment DefaultSprint on Sprint {\n        id\n        startDate\n        endDate\n        storyPointsPlanned\n        stats {\n            totalStoryPoints\n            percentageStoryPointsCompleted\n            percentageStoryPointsInProgress\n            percentageTimeElapsed\n            daysLeft\n            averageStoryPoints\n            successState\n            burnDown\n            streak\n        }\n        placedAssets {\n            asset\n            x\n            y\n        }\n        name\n        animal\n        number\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CreateStandupMeeting($projectId: UUID!, $input: StandupMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createStandupMeeting(input: $input) {\n                    ...DefaultStandupMeeting\n                }\n            }\n        }"): (typeof documents)["\n        mutation CreateStandupMeeting($projectId: UUID!, $input: StandupMeetingInput!) {\n            mutateProject(id: $projectId) {\n                createStandupMeeting(input: $input) {\n                    ...DefaultStandupMeeting\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation StartStandupMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    startStandupMeeting {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation StartStandupMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    startStandupMeeting {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ChangeCurrentAttendee($projectId: UUID!, $userId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    changeCurrentAttendee(attendeeId: $userId) {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation ChangeCurrentAttendee($projectId: UUID!, $userId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    changeCurrentAttendee(attendeeId: $userId) {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation FinishStandupMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    finishStandupMeeting {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation FinishStandupMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateStandupMeeting {\n                    finishStandupMeeting {\n                        ...DefaultStandupMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        subscription StandupMeeting($projectId: UUID!) {\n            standupMeeting(projectId: $projectId) {\n                ...DefaultStandupMeeting\n            }\n        }"): (typeof documents)["\n        subscription StandupMeeting($projectId: UUID!) {\n            standupMeeting(projectId: $projectId) {\n                ...DefaultStandupMeeting\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultStandupMeeting on StandupMeeting {\n        ...DefaultMeeting\n        standupMeetingSettings {\n            countdownPerAttendee\n        }\n        currentAttendee {\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        order {\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        \n    }"): (typeof documents)["\n    fragment DefaultStandupMeeting on StandupMeeting {\n        ...DefaultMeeting\n        standupMeetingSettings {\n            countdownPerAttendee\n        }\n        currentAttendee {\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        order {\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        \n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment UserStats on UserStats {\n          xp\n          level\n          xpToNextLevel\n          totalXp\n\n          bronzeMedals\n          silverMedals\n          goldMedals\n\n          virtualCurrency\n\n          commentsWritten\n          issuesCompleted\n          issuesCreated\n          pullRequestsClosed\n          pullRequestsCreated\n          pullRequestsReviewed\n          reactionsGiven\n      }"): (typeof documents)["\n      fragment UserStats on UserStats {\n          xp\n          level\n          xpToNextLevel\n          totalXp\n\n          bronzeMedals\n          silverMedals\n          goldMedals\n\n          virtualCurrency\n\n          commentsWritten\n          issuesCompleted\n          issuesCreated\n          pullRequestsClosed\n          pullRequestsCreated\n          pullRequestsReviewed\n          reactionsGiven\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment UserInProject on UserInProject {\n          user {\n              id\n              username\n              avatar\n          }\n          roles {\n              gamifiedName\n              name\n              projectPrivileges\n          }\n          achievements {\n              achievement {\n                  name\n                  description\n                  goal\n                  icon {\n                      emoji\n                  }\n              }\n              progress\n              achieved\n          }\n          userStats {\n              level\n              \n              goldMedals\n              silverMedals\n              bronzeMedals\n          }\n          currentBadge {\n              emoji\n          }\n      }"): (typeof documents)["\n      fragment UserInProject on UserInProject {\n          user {\n              id\n              username\n              avatar\n          }\n          roles {\n              gamifiedName\n              name\n              projectPrivileges\n          }\n          achievements {\n              achievement {\n                  name\n                  description\n                  goal\n                  icon {\n                      emoji\n                  }\n              }\n              progress\n              achieved\n          }\n          userStats {\n              level\n              \n              goldMedals\n              silverMedals\n              bronzeMedals\n          }\n          currentBadge {\n              emoji\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                query UserInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        currentUser {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "): (typeof documents)["\n                query UserInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        currentUser {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                query UserStatsQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        currentUser {\n                            userStats {\n                                ... UserStats\n                            }\n                        }\n                    }\n                }\n      "): (typeof documents)["\n                query UserStatsQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        currentUser {\n                            userStats {\n                                ... UserStats\n                            }\n                        }\n                    }\n                }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                query AllUsersInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        users {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "): (typeof documents)["\n                query AllUsersInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        id\n                        users {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation JoinProject($projectId: UUID!) {\n            joinProject(projectId: $projectId) {\n                ... UserInProject\n            }\n        }\n    "): (typeof documents)["\n        mutation JoinProject($projectId: UUID!) {\n            joinProject(projectId: $projectId) {\n                ... UserInProject\n            }\n        }\n    "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;