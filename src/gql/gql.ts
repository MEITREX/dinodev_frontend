/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n      fragment BaseEvent on DefaultEvent {\n          id\n          timestamp\n          user {\n              id\n              username\n              avatar\n          }\n          message\n          eventType {\n              identifier\n          }\n          eventData {\n              key\n              value\n          }\n      }": types.BaseEventFragmentDoc,
    "\n          query EventsOfProject($projectId: UUID!, $page: Int!, $pageSize: Int!) {\n              project(id: $projectId) {\n                  events(page: $page, size: $pageSize) {\n                      ...BaseEvent\n                  }\n              }\n          }": types.EventsOfProjectDocument,
    "\n      fragment BaseGlobalUser on GlobalUser {\n          id\n          avatar\n          username\n          roles {\n              name\n              globalPrivileges\n          }\n      }": types.BaseGlobalUserFragmentDoc,
    "\n        query CurrentUser {\n            currentUser {\n                ... BaseGlobalUser\n            }\n        }\n    ": types.CurrentUserDocument,
    "\n      fragment BaseImsUser on ImsUser {\n          isAdmin\n          avatar\n          username\n      }": types.BaseImsUserFragmentDoc,
    "\n        query CurrentImsUserData {\n            currentImsUser {\n                ... BaseImsUser\n            }\n        }\n    ": types.CurrentImsUserDataDocument,
    "\n        mutation registerUser($input: CreateGlobalUserInput!) {\n            register(input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    ": types.RegisterUserDocument,
    "\n        mutation updateGlobalUser($userId: UUID!, $input: UpdateGlobalUserInput!) {\n            updateGlobalUser(id: $userId, input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    ": types.UpdateGlobalUserDocument,
    "\n      fragment ProjectBoard on ProjectBoard {\n          states {\n              state {\n                  name\n                  type\n                  imsStateId\n              }\n              issues {\n                  id\n                  title\n                  description\n                  storyPoints\n                  effortEstimation\n                  priority\n                  type {\n                      iconPath\n                      name\n                  }\n                  assignees {\n                      user {\n                          id\n                          avatar\n                          username\n                      }\n                  }\n              }\n          }\n      }": types.ProjectBoardFragmentDoc,
    "\n      fragment IssueBase on Issue {\n          id\n          title\n          description\n          storyPoints\n          effortEstimation\n          priority\n          type {\n              iconPath\n              name\n          }\n          assignees {\n              user {\n                  id\n                  avatar\n                  username\n              }\n          }\n      }": types.IssueBaseFragmentDoc,
    "\n      fragment IssueWithEvents on Issue {\n          ...IssueBase\n          issueEvents {\n              id\n              timestamp\n              user {\n                  id\n                  username\n                  avatar\n              }\n              message\n              eventType {\n                  identifier\n              }\n              eventData {\n                  key\n                  value\n              }\n          }\n      }": types.IssueWithEventsFragmentDoc,
    "\n        query BoardQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                projectBoard {\n                    ... ProjectBoard\n                }\n            }\n        }\n    ": types.BoardQueryDocument,
    "\n        mutation ChangeStateMutation($projectId: UUID!, $issueId: ID!, $stateName: String!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    changeIssueState(stateName: $stateName) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    ": types.ChangeStateMutationDocument,
    "\n        mutation FinishIssueMutation($projectId: UUID!, $issueId: ID!, $doneStateName: String!, $dodConfirmStates: [DefinitionOfDoneConfirmState!]!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    finishIssue(doneStateName: $doneStateName, dodConfirmStates: $dodConfirmStates) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    ": types.FinishIssueMutationDocument,
    "\n        mutation AssignIssueMutation($projectId: UUID!, $issueId: ID!, $assigneeId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    assignIssue(assigneeId: $assigneeId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    ": types.AssignIssueMutationDocument,
    "\n        query IssueQuery($projectId: UUID!, $issueId: UUID!) {\n            project(id: $projectId) {\n                issue(id: $issueId) {\n                    ...IssueWithEvents\n                }\n            }\n        }\n    ": types.IssueQueryDocument,
    "\n        mutation ChangePage($projectId: UUID!, $page: PlanningMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    changePage(page: $page) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.ChangePageDocument,
    "\n        mutation VoteAnimal($projectId: UUID!, $animal: Animal!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteAnimal(animal: $animal) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.VoteAnimalDocument,
    "\n        mutation EndAnimalVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endAnimalVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.EndAnimalVotingDocument,
    "\n        mutation AddName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.AddNameDocument,
    "\n        mutation VoteName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.VoteNameDocument,
    "\n        mutation EndNameVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endNameVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.EndNameVotingDocument,
    "\n        mutation VoteEstimation($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteEstimation(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.VoteEstimationDocument,
    "\n        mutation RestartEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    restartEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.RestartEstimationDocument,
    "\n        mutation NextIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    nextIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.NextIssueDocument,
    "\n        mutation StartCountdown($projectId: UUID!, $seconds: Int!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    startCountdown(seconds: $seconds) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.StartCountdownDocument,
    "\n        mutation EndEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.EndEstimationDocument,
    "\n        mutation SetFinalResult($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    setFinalResult(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.SetFinalResultDocument,
    "\n        mutation AddSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.AddSprintIssueDocument,
    "\n        mutation RemoveSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    removeSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }": types.RemoveSprintIssueDocument,
    "\n        mutation FinishMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    finishMeeting {\n                        ...DefaultSprint\n                    }\n                }\n            }\n        }": types.FinishMeetingDocument,
    "\n        subscription PlanningMeeting($projectId: UUID!) {\n            planningMeeting(projectId: $projectId) {\n                ...DefaultPlanningMeeting\n            }\n        }": types.PlanningMeetingDocument,
    "\n    fragment DefaultPlanningMeeting on PlanningMeeting {\n        currentPage\n        attendees {\n            state\n            role\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        animalVoting {\n            finished\n            votableAnimals\n            votingResult\n            animalVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        nameVoting {\n            finished\n            votableNames\n            votingResult\n            nameVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        issueEstimations {\n            finished\n            countdownSeconds\n            estimationStats {\n                max\n                min\n                median\n                mode\n            }\n            finalResult\n            issue {\n                ...IssueBase\n            }\n            votes {\n                totalVotes\n                votedFor\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        sprintGoalVoting {\n            finished\n            nonSprintIssues {\n                ...IssueBase\n            }\n            sprintIssues {\n                ...IssueBase\n            }\n        }\n    }": types.DefaultPlanningMeetingFragmentDoc,
    "\n      fragment ProjectMain on Project {\n          id\n          name\n          description\n\n          projectSettings {\n              imsSettings {\n                  imsName\n              }\n              codeRepositorySettings {\n                  codeRepositoryName\n              }\n              definitionOfDone {\n                  text\n                  required\n                  implies {\n                      text\n                      required\n                      implies {\n                          text\n                          required\n                      }\n                  }\n              }\n          }\n      }\n  ": types.ProjectMainFragmentDoc,
    "\n      fragment ProjectBase on Project {\n          id\n          name\n          description\n\n          currentUser {\n              roles {\n                  projectPrivileges\n              }\n          }\n      }\n  ": types.ProjectBaseFragmentDoc,
    "\n        query ProjectMainQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                ... ProjectMain\n            }\n        }\n    ": types.ProjectMainQueryDocument,
    "\n        query AllProjectsQuery {\n            projects {\n                ... ProjectBase\n            }\n        }\n    ": types.AllProjectsQueryDocument,
    "\n        mutation CreateProject($input: CreateProjectInput!) {\n            createProject(input: $input) {\n                ... ProjectMain\n            }\n        }\n    ": types.CreateProjectDocument,
    "\n        mutation UpdateProject($projectId: UUID!, $input: UpdateProjectInput!) {\n            updateProject(id: $projectId, input: $input) {\n                ... ProjectMain\n            }\n        }\n    ": types.UpdateProjectDocument,
    "\n        mutation DeleteProject($projectId: UUID!) {\n            deleteProject(id: $projectId)\n        }\n    ": types.DeleteProjectDocument,
    "\n      query Sprint($projectId: UUID!) {\n          project(id: $projectId) {\n              currentSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  ": types.SprintDocument,
    "\n    fragment DefaultSprint on Sprint {\n        id\n        startDate\n        endDate\n        storyPointsPlanned\n        stats {\n            percentageStoryPointsCompleted\n            percentageTimeElapsed\n            daysLeft\n        }\n        name\n        animal\n    }\n": types.DefaultSprintFragmentDoc,
    "\n      fragment UserInProject on UserInProject {\n          user {\n              id\n              username\n              avatar\n          }\n          roles {\n              gamifiedName\n              name\n              projectPrivileges\n          }\n      }": types.UserInProjectFragmentDoc,
    "\n                query UserInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        currentUser {\n                            ... UserInProject\n                        }\n                    }\n                }\n      ": types.UserInProjectQueryDocument,
    "\n                query AllUsersInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        users {\n                            ... UserInProject\n                        }\n                    }\n                }\n      ": types.AllUsersInProjectQueryDocument,
    "\n        mutation JoinProject($projectId: UUID!) {\n            joinProject(projectId: $projectId) {\n                ... UserInProject\n            }\n        }\n    ": types.JoinProjectDocument,
    "\n  query meetings($projectId: UUID!) {\n    project(id: $projectId) {\n      activePlanningMeeting {\n        projectId\n      }\n      activeRetrospectiveMeeting {\n        projectId\n      }\n      activeStandupMeeting {\n        projectId\n      }\n    }\n  }\n": types.MeetingsDocument,
    "\n  mutation joinMeeting($type: MeetingType!, $projectId: UUID!) {\n    mutateProject(id: $projectId) {\n      joinMeeting(type: $type) {\n        attendees {\n          userId\n          user {\n            id\n            username\n            avatar\n          }\n          state\n          role\n        }\n      }\n    }\n  }\n": types.JoinMeetingDocument,
    "\n  mutation leaveMeeting($type: MeetingType!, $projectId: UUID!) {\n    mutateProject(id: $projectId) {\n      leaveMeeting(type: $type) {\n        attendees {\n          userId\n          state\n          role\n        }\n      }\n    }\n  }\n": types.LeaveMeetingDocument,
    "\n  subscription meetingAttendees($meetingType: MeetingType!, $projectId: UUID!) {\n    meeting(projectId: $projectId meetingType: $meetingType) {\n      attendees {\n        userId\n        state\n        role\n        user {\n          id\n          username\n          avatar\n        }\n      }\n    }\n  }\n": types.MeetingAttendeesDocument,
    "\n  mutation createPlanningMeeting($projectId: UUID!, $input: PlanningMeetingInput!) {\n    mutateProject(id: $projectId) {\n        createPlanningMeeting(input: $input) {\n          projectId\n        }\n    }\n  }\n": types.CreatePlanningMeetingDocument,
    "\n  query planningMeeting($projectId: UUID!) {\n    project(id: $projectId) {\n      activePlanningMeeting {\n        attendees {\n          userId\n          state\n          role\n        }\n        currentPage\n      }\n    }\n  }\n": types.PlanningMeetingDocument,
    "\n  mutation updatePlanningMeetingPage($projectId: UUID!, $page: PlanningMeetingPage!) {\n    mutateProject(id: $projectId) {\n      mutatePlanningMeeting {\n        changePage(page: $page) {\n          __typename\n        }\n      }\n    }\n  }\n": types.UpdatePlanningMeetingPageDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment BaseEvent on DefaultEvent {\n          id\n          timestamp\n          user {\n              id\n              username\n              avatar\n          }\n          message\n          eventType {\n              identifier\n          }\n          eventData {\n              key\n              value\n          }\n      }"): (typeof documents)["\n      fragment BaseEvent on DefaultEvent {\n          id\n          timestamp\n          user {\n              id\n              username\n              avatar\n          }\n          message\n          eventType {\n              identifier\n          }\n          eventData {\n              key\n              value\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query EventsOfProject($projectId: UUID!, $page: Int!, $pageSize: Int!) {\n              project(id: $projectId) {\n                  events(page: $page, size: $pageSize) {\n                      ...BaseEvent\n                  }\n              }\n          }"): (typeof documents)["\n          query EventsOfProject($projectId: UUID!, $page: Int!, $pageSize: Int!) {\n              project(id: $projectId) {\n                  events(page: $page, size: $pageSize) {\n                      ...BaseEvent\n                  }\n              }\n          }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment BaseGlobalUser on GlobalUser {\n          id\n          avatar\n          username\n          roles {\n              name\n              globalPrivileges\n          }\n      }"): (typeof documents)["\n      fragment BaseGlobalUser on GlobalUser {\n          id\n          avatar\n          username\n          roles {\n              name\n              globalPrivileges\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query CurrentUser {\n            currentUser {\n                ... BaseGlobalUser\n            }\n        }\n    "): (typeof documents)["\n        query CurrentUser {\n            currentUser {\n                ... BaseGlobalUser\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment BaseImsUser on ImsUser {\n          isAdmin\n          avatar\n          username\n      }"): (typeof documents)["\n      fragment BaseImsUser on ImsUser {\n          isAdmin\n          avatar\n          username\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query CurrentImsUserData {\n            currentImsUser {\n                ... BaseImsUser\n            }\n        }\n    "): (typeof documents)["\n        query CurrentImsUserData {\n            currentImsUser {\n                ... BaseImsUser\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation registerUser($input: CreateGlobalUserInput!) {\n            register(input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "): (typeof documents)["\n        mutation registerUser($input: CreateGlobalUserInput!) {\n            register(input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation updateGlobalUser($userId: UUID!, $input: UpdateGlobalUserInput!) {\n            updateGlobalUser(id: $userId, input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "): (typeof documents)["\n        mutation updateGlobalUser($userId: UUID!, $input: UpdateGlobalUserInput!) {\n            updateGlobalUser(id: $userId, input: $input) {\n                ...BaseGlobalUser\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment ProjectBoard on ProjectBoard {\n          states {\n              state {\n                  name\n                  type\n                  imsStateId\n              }\n              issues {\n                  id\n                  title\n                  description\n                  storyPoints\n                  effortEstimation\n                  priority\n                  type {\n                      iconPath\n                      name\n                  }\n                  assignees {\n                      user {\n                          id\n                          avatar\n                          username\n                      }\n                  }\n              }\n          }\n      }"): (typeof documents)["\n      fragment ProjectBoard on ProjectBoard {\n          states {\n              state {\n                  name\n                  type\n                  imsStateId\n              }\n              issues {\n                  id\n                  title\n                  description\n                  storyPoints\n                  effortEstimation\n                  priority\n                  type {\n                      iconPath\n                      name\n                  }\n                  assignees {\n                      user {\n                          id\n                          avatar\n                          username\n                      }\n                  }\n              }\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment IssueBase on Issue {\n          id\n          title\n          description\n          storyPoints\n          effortEstimation\n          priority\n          type {\n              iconPath\n              name\n          }\n          assignees {\n              user {\n                  id\n                  avatar\n                  username\n              }\n          }\n      }"): (typeof documents)["\n      fragment IssueBase on Issue {\n          id\n          title\n          description\n          storyPoints\n          effortEstimation\n          priority\n          type {\n              iconPath\n              name\n          }\n          assignees {\n              user {\n                  id\n                  avatar\n                  username\n              }\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment IssueWithEvents on Issue {\n          ...IssueBase\n          issueEvents {\n              id\n              timestamp\n              user {\n                  id\n                  username\n                  avatar\n              }\n              message\n              eventType {\n                  identifier\n              }\n              eventData {\n                  key\n                  value\n              }\n          }\n      }"): (typeof documents)["\n      fragment IssueWithEvents on Issue {\n          ...IssueBase\n          issueEvents {\n              id\n              timestamp\n              user {\n                  id\n                  username\n                  avatar\n              }\n              message\n              eventType {\n                  identifier\n              }\n              eventData {\n                  key\n                  value\n              }\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query BoardQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                projectBoard {\n                    ... ProjectBoard\n                }\n            }\n        }\n    "): (typeof documents)["\n        query BoardQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                projectBoard {\n                    ... ProjectBoard\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ChangeStateMutation($projectId: UUID!, $issueId: ID!, $stateName: String!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    changeIssueState(stateName: $stateName) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation ChangeStateMutation($projectId: UUID!, $issueId: ID!, $stateName: String!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    changeIssueState(stateName: $stateName) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation FinishIssueMutation($projectId: UUID!, $issueId: ID!, $doneStateName: String!, $dodConfirmStates: [DefinitionOfDoneConfirmState!]!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    finishIssue(doneStateName: $doneStateName, dodConfirmStates: $dodConfirmStates) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation FinishIssueMutation($projectId: UUID!, $issueId: ID!, $doneStateName: String!, $dodConfirmStates: [DefinitionOfDoneConfirmState!]!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    finishIssue(doneStateName: $doneStateName, dodConfirmStates: $dodConfirmStates) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AssignIssueMutation($projectId: UUID!, $issueId: ID!, $assigneeId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    assignIssue(assigneeId: $assigneeId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        mutation AssignIssueMutation($projectId: UUID!, $issueId: ID!, $assigneeId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutateIssue(id: $issueId) {\n                    assignIssue(assigneeId: $assigneeId) {\n                        ...IssueBase\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query IssueQuery($projectId: UUID!, $issueId: UUID!) {\n            project(id: $projectId) {\n                issue(id: $issueId) {\n                    ...IssueWithEvents\n                }\n            }\n        }\n    "): (typeof documents)["\n        query IssueQuery($projectId: UUID!, $issueId: UUID!) {\n            project(id: $projectId) {\n                issue(id: $issueId) {\n                    ...IssueWithEvents\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ChangePage($projectId: UUID!, $page: PlanningMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    changePage(page: $page) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation ChangePage($projectId: UUID!, $page: PlanningMeetingPage!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    changePage(page: $page) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation VoteAnimal($projectId: UUID!, $animal: Animal!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteAnimal(animal: $animal) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation VoteAnimal($projectId: UUID!, $animal: Animal!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteAnimal(animal: $animal) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation EndAnimalVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endAnimalVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation EndAnimalVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endAnimalVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AddName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation AddName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation VoteName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation VoteName($projectId: UUID!, $name: String!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteName(name: $name) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation EndNameVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endNameVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation EndNameVoting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endNameVoting {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation VoteEstimation($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteEstimation(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation VoteEstimation($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    voteEstimation(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation RestartEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    restartEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation RestartEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    restartEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation NextIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    nextIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation NextIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    nextIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation StartCountdown($projectId: UUID!, $seconds: Int!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    startCountdown(seconds: $seconds) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation StartCountdown($projectId: UUID!, $seconds: Int!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    startCountdown(seconds: $seconds) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation EndEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation EndEstimation($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    endEstimation {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation SetFinalResult($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    setFinalResult(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation SetFinalResult($projectId: UUID!, $estimation: TShirtSizeEstimation!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    setFinalResult(estimation: $estimation) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation AddSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation AddSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    addSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation RemoveSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    removeSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation RemoveSprintIssue($projectId: UUID!, $issueId: ID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    removeSprintIssue(issueId: $issueId) {\n                        ...DefaultPlanningMeeting\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation FinishMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    finishMeeting {\n                        ...DefaultSprint\n                    }\n                }\n            }\n        }"): (typeof documents)["\n        mutation FinishMeeting($projectId: UUID!) {\n            mutateProject(id: $projectId) {\n                mutatePlanningMeeting {\n                    finishMeeting {\n                        ...DefaultSprint\n                    }\n                }\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        subscription PlanningMeeting($projectId: UUID!) {\n            planningMeeting(projectId: $projectId) {\n                ...DefaultPlanningMeeting\n            }\n        }"): (typeof documents)["\n        subscription PlanningMeeting($projectId: UUID!) {\n            planningMeeting(projectId: $projectId) {\n                ...DefaultPlanningMeeting\n            }\n        }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultPlanningMeeting on PlanningMeeting {\n        currentPage\n        attendees {\n            state\n            role\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        animalVoting {\n            finished\n            votableAnimals\n            votingResult\n            animalVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        nameVoting {\n            finished\n            votableNames\n            votingResult\n            nameVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        issueEstimations {\n            finished\n            countdownSeconds\n            estimationStats {\n                max\n                min\n                median\n                mode\n            }\n            finalResult\n            issue {\n                ...IssueBase\n            }\n            votes {\n                totalVotes\n                votedFor\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        sprintGoalVoting {\n            finished\n            nonSprintIssues {\n                ...IssueBase\n            }\n            sprintIssues {\n                ...IssueBase\n            }\n        }\n    }"): (typeof documents)["\n    fragment DefaultPlanningMeeting on PlanningMeeting {\n        currentPage\n        attendees {\n            state\n            role\n            user {\n                id\n                username\n                avatar\n            }\n        }\n        animalVoting {\n            finished\n            votableAnimals\n            votingResult\n            animalVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        nameVoting {\n            finished\n            votableNames\n            votingResult\n            nameVotingStates {\n                votedFor\n                totalVotes\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        issueEstimations {\n            finished\n            countdownSeconds\n            estimationStats {\n                max\n                min\n                median\n                mode\n            }\n            finalResult\n            issue {\n                ...IssueBase\n            }\n            votes {\n                totalVotes\n                votedFor\n                userVotes {\n                    user {\n                        username\n                    }\n                }\n            }\n        }\n        sprintGoalVoting {\n            finished\n            nonSprintIssues {\n                ...IssueBase\n            }\n            sprintIssues {\n                ...IssueBase\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment ProjectMain on Project {\n          id\n          name\n          description\n\n          projectSettings {\n              imsSettings {\n                  imsName\n              }\n              codeRepositorySettings {\n                  codeRepositoryName\n              }\n              definitionOfDone {\n                  text\n                  required\n                  implies {\n                      text\n                      required\n                      implies {\n                          text\n                          required\n                      }\n                  }\n              }\n          }\n      }\n  "): (typeof documents)["\n      fragment ProjectMain on Project {\n          id\n          name\n          description\n\n          projectSettings {\n              imsSettings {\n                  imsName\n              }\n              codeRepositorySettings {\n                  codeRepositoryName\n              }\n              definitionOfDone {\n                  text\n                  required\n                  implies {\n                      text\n                      required\n                      implies {\n                          text\n                          required\n                      }\n                  }\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment ProjectBase on Project {\n          id\n          name\n          description\n\n          currentUser {\n              roles {\n                  projectPrivileges\n              }\n          }\n      }\n  "): (typeof documents)["\n      fragment ProjectBase on Project {\n          id\n          name\n          description\n\n          currentUser {\n              roles {\n                  projectPrivileges\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query ProjectMainQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                ... ProjectMain\n            }\n        }\n    "): (typeof documents)["\n        query ProjectMainQuery($projectId: UUID!) {\n            project(id: $projectId) {\n                ... ProjectMain\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query AllProjectsQuery {\n            projects {\n                ... ProjectBase\n            }\n        }\n    "): (typeof documents)["\n        query AllProjectsQuery {\n            projects {\n                ... ProjectBase\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation CreateProject($input: CreateProjectInput!) {\n            createProject(input: $input) {\n                ... ProjectMain\n            }\n        }\n    "): (typeof documents)["\n        mutation CreateProject($input: CreateProjectInput!) {\n            createProject(input: $input) {\n                ... ProjectMain\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation UpdateProject($projectId: UUID!, $input: UpdateProjectInput!) {\n            updateProject(id: $projectId, input: $input) {\n                ... ProjectMain\n            }\n        }\n    "): (typeof documents)["\n        mutation UpdateProject($projectId: UUID!, $input: UpdateProjectInput!) {\n            updateProject(id: $projectId, input: $input) {\n                ... ProjectMain\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation DeleteProject($projectId: UUID!) {\n            deleteProject(id: $projectId)\n        }\n    "): (typeof documents)["\n        mutation DeleteProject($projectId: UUID!) {\n            deleteProject(id: $projectId)\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Sprint($projectId: UUID!) {\n          project(id: $projectId) {\n              currentSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "): (typeof documents)["\n      query Sprint($projectId: UUID!) {\n          project(id: $projectId) {\n              currentSprint {\n                  ...DefaultSprint\n              }\n          }\n      }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultSprint on Sprint {\n        id\n        startDate\n        endDate\n        storyPointsPlanned\n        stats {\n            percentageStoryPointsCompleted\n            percentageTimeElapsed\n            daysLeft\n        }\n        name\n        animal\n    }\n"): (typeof documents)["\n    fragment DefaultSprint on Sprint {\n        id\n        startDate\n        endDate\n        storyPointsPlanned\n        stats {\n            percentageStoryPointsCompleted\n            percentageTimeElapsed\n            daysLeft\n        }\n        name\n        animal\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment UserInProject on UserInProject {\n          user {\n              id\n              username\n              avatar\n          }\n          roles {\n              gamifiedName\n              name\n              projectPrivileges\n          }\n      }"): (typeof documents)["\n      fragment UserInProject on UserInProject {\n          user {\n              id\n              username\n              avatar\n          }\n          roles {\n              gamifiedName\n              name\n              projectPrivileges\n          }\n      }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                query UserInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        currentUser {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "): (typeof documents)["\n                query UserInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        currentUser {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                query AllUsersInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        users {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "): (typeof documents)["\n                query AllUsersInProjectQuery($projectId: UUID!) {\n                    project(id: $projectId) {\n                        users {\n                            ... UserInProject\n                        }\n                    }\n                }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation JoinProject($projectId: UUID!) {\n            joinProject(projectId: $projectId) {\n                ... UserInProject\n            }\n        }\n    "): (typeof documents)["\n        mutation JoinProject($projectId: UUID!) {\n            joinProject(projectId: $projectId) {\n                ... UserInProject\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query meetings($projectId: UUID!) {\n    project(id: $projectId) {\n      activePlanningMeeting {\n        projectId\n      }\n      activeRetrospectiveMeeting {\n        projectId\n      }\n      activeStandupMeeting {\n        projectId\n      }\n    }\n  }\n"): (typeof documents)["\n  query meetings($projectId: UUID!) {\n    project(id: $projectId) {\n      activePlanningMeeting {\n        projectId\n      }\n      activeRetrospectiveMeeting {\n        projectId\n      }\n      activeStandupMeeting {\n        projectId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation joinMeeting($type: MeetingType!, $projectId: UUID!) {\n    mutateProject(id: $projectId) {\n      joinMeeting(type: $type) {\n        attendees {\n          userId\n          user {\n            id\n            username\n            avatar\n          }\n          state\n          role\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation joinMeeting($type: MeetingType!, $projectId: UUID!) {\n    mutateProject(id: $projectId) {\n      joinMeeting(type: $type) {\n        attendees {\n          userId\n          user {\n            id\n            username\n            avatar\n          }\n          state\n          role\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation leaveMeeting($type: MeetingType!, $projectId: UUID!) {\n    mutateProject(id: $projectId) {\n      leaveMeeting(type: $type) {\n        attendees {\n          userId\n          state\n          role\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation leaveMeeting($type: MeetingType!, $projectId: UUID!) {\n    mutateProject(id: $projectId) {\n      leaveMeeting(type: $type) {\n        attendees {\n          userId\n          state\n          role\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription meetingAttendees($meetingType: MeetingType!, $projectId: UUID!) {\n    meeting(projectId: $projectId meetingType: $meetingType) {\n      attendees {\n        userId\n        state\n        role\n        user {\n          id\n          username\n          avatar\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription meetingAttendees($meetingType: MeetingType!, $projectId: UUID!) {\n    meeting(projectId: $projectId meetingType: $meetingType) {\n      attendees {\n        userId\n        state\n        role\n        user {\n          id\n          username\n          avatar\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createPlanningMeeting($projectId: UUID!, $input: PlanningMeetingInput!) {\n    mutateProject(id: $projectId) {\n        createPlanningMeeting(input: $input) {\n          projectId\n        }\n    }\n  }\n"): (typeof documents)["\n  mutation createPlanningMeeting($projectId: UUID!, $input: PlanningMeetingInput!) {\n    mutateProject(id: $projectId) {\n        createPlanningMeeting(input: $input) {\n          projectId\n        }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query planningMeeting($projectId: UUID!) {\n    project(id: $projectId) {\n      activePlanningMeeting {\n        attendees {\n          userId\n          state\n          role\n        }\n        currentPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query planningMeeting($projectId: UUID!) {\n    project(id: $projectId) {\n      activePlanningMeeting {\n        attendees {\n          userId\n          state\n          role\n        }\n        currentPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updatePlanningMeetingPage($projectId: UUID!, $page: PlanningMeetingPage!) {\n    mutateProject(id: $projectId) {\n      mutatePlanningMeeting {\n        changePage(page: $page) {\n          __typename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePlanningMeetingPage($projectId: UUID!, $page: PlanningMeetingPage!) {\n    mutateProject(id: $projectId) {\n      mutatePlanningMeeting {\n        changePage(page: $page) {\n          __typename\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;